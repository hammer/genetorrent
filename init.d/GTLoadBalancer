#!/bin/sh
#
# LSB-ified SysV-style init script for the GeneTorrent Load Balancer
# Version 1.0; Copyright (c) 2011, Annai Systems, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2.1 of the GNU Lesser General Public License
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# TODO List: 
# * change Required Start to include the gpfs service as a pre-requisite
#
# For the curious, here's what those exit return codes mean:
# Code  Meaning
# 0	success
# 1	generic or unspecified error
# 2	invalid or excess arguments
# 3	unimplemented feature (e.g., "reload")
# 4	user had insufficient privileges
# 5	program is not installed
# 6	program is not configured
# 7	program is not running
#
# ...and here's what the status command return codes mean:
# Code  Meaning
# 0	program is running or service is OK
# 1	program is dead and /var/run pid file exists
# 2	program is dead and /var/lock lock file exists
# 3	program is not running
# 4	program or service status is unknown

# Now add something for chkconfig to chew on
#
# chkconfig:   345 22 02
# description: GeneTorrent Load Balancer process
# processname: GTLoadBalancer
# pidfile:     /var/run/GTLoadBalancer.pid
#
# IMPORTANT NOTES: 
# The LSB-style stanza below takes precedence over the chkconfig lines above 
# The (lowercase) pidfile def above needs to match the (uppercase) one below
#
### BEGIN INIT INFO
# Required-Start:    
# Should-Start:      $syslog $network
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: GeneTorrent Load Balancer for file transfer servers
# Description:       GeneTorrent is a high-speed file transfer application 
#                    that runs on a Linux cluster and moves huge data sets
#                    over the WAN efficiently, securely and reliably.
### END INIT INFO

# Installation-specific variables go here:
#
# Uncomment the next line to get corefiles
export DAEMON_COREFILE_LIMIT="unlimited"
#
# LB_BIN   - what command to execute to start GT
# LB_USER  - who the GTLoadBalancer runs as
# LB_ROOT  - where to find files and work queues
# LB_HOST  - where is this GT instance running
#
LB_BIN=/usr/bin/GTLoadBalancer
LB_USER="gtorrent"
LB_ROOT='/cghub/data/workqueues'
LB_HOST=`hostname`
LB_CONFIG="--config-file=/etc/gnos.d/GTLoadBalancer.conf"
LB_PIPE="> /cghub/logs/gtlb/gtlb_${LB_HOST}.log 2>&1"
#
# Now assemble all these vars into the GT command
#
LB_CMD="$LB_BIN $LB_CONFIG $LB_PIPE &" 

# Validate some basic conditions

# Verify we have an executable
if [ "$1" = 'status' ]; then
    test -x $LB_BIN || exit 4
else
    test -x $LB_BIN || exit 5
fi

# Verify we have the root directory
if [ "$1" = 'status' ]; then
    test -d $LB_ROOT || exit 6
else
    test -d $LB_ROOT || exit 6
fi

# Source function library.
. /etc/init.d/functions
. /etc/sysconfig/network

# The runtime-specific variables are here:
LOCKFILE=/var/lock/subsys/GTLoadBalancer
PIDFILE=/var/run/GTLoadBalancer.pid
RETVAL=0

base=${0##*/}

start() {
    # Check that networking is configured.
    [ ${NETWORKING} = "no" ] && exit 1

	echo -n $"Starting GTLoadBalancer ... "
    daemon --pidfile=${PIDFILE} --user=${LB_USER} $LB_CMD
    RETVAL=$?
    echo
	/bin/ps -C $base -o pid= | grep -v "$$" > $PIDFILE 2> /dev/null
    [ $RETVAL -eq 0 ] && touch ${LOCKFILE} 
	return $RETVAL
}

stop() {
    echo -n $"Stopping GTLoadBalancer server... "
    killproc -p ${PIDFILE} $LB_BIN
    RETVAL=$?
    [ $RETVAL -eq 0 ] && rm -f ${LOCKFILE} ${PIDFILE}
    echo
	return $RETVAL
}

reload() {
    echo -n $"GTLoadBalancer reload not implemented... "
    killproc -p ${PIDFILE} $LB_BIN -HUP
	RETVAL=$?
	echo
	return $RETVAL
}

restart() {
    echo $"Restarting GTLoadBalancer server... "
	stop
	start
}

RETVAL=0

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	status -p ${PIDFILE} $LB_BIN
        RETVAL=$?
	;;
  restart)
	restart
	;;
  reload)
        reload
	;;
  condrestart)
  	if [ -f $LOCKFILE ]; then
		restart
	fi
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|condrestart}"
	exit 2
        ;;
esac

exit $RETVAL
