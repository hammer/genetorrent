#!/usr/bin/env python
#
# gtcheck -- Compares a set of data files to a GTO file and confirms
# that they match
#
################################################################################
# 
# Copyright 2012 Annai Systems, Inc.   All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice, 
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright notice, 
#       this list of conditions and the following disclaimer in the documentation 
#       and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY ANNAI SYSTEMS ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those 
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of Annai Systems, Inc.
#
################################################################################

# imports
from optparse import OptionParser
import sys
import os
import hashlib
import gtoinfo
import binascii

# Current version
revlevel = '@PACKAGE_VERSION@'

# check_gto()
#
# Compares a given GTO file to the underlying data.
#
# Inputs:
# - gtofile: the gto filename
# - params: the params structure from the options
#
# Outputs:
# - returns true if the GTO compares correctly, false otherwise
def check_gto(gtofile, params):
    gtodict = gtoinfo.read_gto(gtofile)

    pieces=gtodict['info']['pieces']
    num_pieces = len(pieces)/20
    piece_locations = gtoinfo.find_piece_bytes(gtodict, 0, num_pieces)

    for p in range(num_pieces):
        expected_hash = gtoinfo.piece_hash(gtodict, p)
        h = hashlib.sha1()
        for chunk in piece_locations[p]:
            fname = os.path.join(params.parent_dir, chunk[0])
            with open(fname, 'r') as f: 
                f.seek(chunk[1])
                h.update(f.read(chunk[2]))
        if (h.digest() != expected_hash):
            if (not params.quiet):
                print "Error: %s: piece %d is corrupt" % (os.path.basename(gtofile), p)
                print "  Expected hash: %s" % binascii.b2a_hex(expected_hash)
                print "  Computed hash: %s" % binascii.b2a_hex(h.digest())
                print ""
                print "  The bytes for this piece are located here:"
                for chunk in piece_locations[p]:
                    print "   %s, offset %d, size %d" % (chunk[0], chunk[1], chunk[2])
            return False

    return True
                

# main()
#
# Parses the cmd line options and then calls process() to process each
# GTO file
#
# Return the exit code
def main():
    # Parse the command line parameters
    parser = OptionParser(description='Confirm that a set of data files match a GTO file',
                          version=("%%prog %s" % revlevel),
                          usage="usage: %prog [options] gtofile [gtofile ...]")

    parser.add_option('-d', '--parent_directory', action='store', 
                      default=os.getcwd(), dest='parent_dir', metavar="DIR",
                      help='The parent directory containing the data files; default=cwd')

    parser.add_option('-q', '--quiet', action='store_true', 
                      default=False, dest='quiet', 
                      help='Do not print diagnostic output on error; simply exit nonzero')

    (params, gto_filenames) = parser.parse_args()

    if (len(gto_filenames) == 0):
        parser.print_help()
        return 1

    try:
        for f in gto_filenames:
            if (not check_gto(f, params)):
                return 1
    except:
        print "Error:", sys.exc_info()[1]
        return 1

    return 0


# Check the python version for compatability.  Python 3 is not
# backward compatible.
if sys.version_info[0] != 2 or sys.version_info[1] < 6:
    print("This script requires Python version 2.6")
    sys.exit(1)

if __name__ == "__main__":
    sys.exit(main())
