#!/usr/bin/env python

'''
gtperftest
==========

This script provides a performance testing harness for GeneTorrent's
download client.

As configured, the script downloads four 60GB analysis objects
form the CGHub servers:

1.  60GB zero-filled data file with SSL and default options
2.  60GB zero-filled data file without SSL and default options
3.  60GB zero-filled data file with SSL using zero-storage option
4.  60GB zero-filled data file without SSL using zero-storage option

The script prints to standard out the following statistics (example data):

Run1 (12eb28b6-9b8d-4c41-bb8e-4917b) Seconds elapsed: 99.9 Bytes/second: 99999

...where Run1 corresponds to list item 1 above, etc.

If any error occurs, or if an inactivity timeout occurs, the script will throw
an exception and stop (returning non-zero).
'''

from subprocess import Popen, call, PIPE
from optparse import OptionParser
import time
import os
import shutil

DEFAULT_SSL_UUID   = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'
DEFAULT_NOSSL_UUID = 'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'
DOWNLOAD_PATH      = 'perfdata'
DATASIZE   = 60 * (2 ** 30)             # 60 gigabytes

# These arguments are always added to gtdownload
GTDOWNLOAD_ARGS = [
    '--inactivity-timeout=5',
    '--path=%s' % (DOWNLOAD_PATH),
]

options = ''

def timedoperation(funct):
    ''' Decorator that prints to standard out the amount
        of time that elapsed in the method.  It also prints the bytes
        per second of the operation, assuming that DATASIZE bytes
        were transferred in the elapsed time. '''
    def timedeco(a, run, arguments=''):
        start_time = time.time()
        funct(a, run, arguments=arguments)
        end_time = time.time()
        elapsed_sec = end_time - start_time
        print 'Run%s (%s) Seconds elapsed: %f MB/second: %f' % (
            run,
            a.uuid,
            elapsed_sec,
            DATASIZE/2**20/elapsed_sec)
    return timedeco

class GTDownload(object):

    def __init__(self, uuid):
        ''' Sets up the download. (For now, only sets the UUID on object. '''
        self.uuid = uuid
        try:
            shutil.rmtree(DOWNLOAD_PATH)
        except OSError:
            pass # path didn't exist, non-fatal error

        os.mkdir(DOWNLOAD_PATH)

    def __del__(self):
        # Clean up
        shutil.rmtree(DOWNLOAD_PATH)

    @timedoperation
    def run(self, run, arguments=[]):
        ''' Run actually completes the transfer and inspects the return
            code. '''
        print 'Downloading uuid \'{0}\' with arguments: {1}'.format(
            self.uuid,
            arguments if arguments else 'DEFAULT'
        )

        command = [
            'gtdownload',
            self.uuid,
            '-c', 'https://cghub.ucsc.edu/software/downloads/cghub_public.pem',
            '-vv'
        ]
        command.extend(GTDOWNLOAD_ARGS)
        command.extend(arguments.split())

        process = Popen(command,
            stdout=PIPE,
            stderr=PIPE,
        )

        stdout, stderr = process.communicate()
        if options.verbose:
            print 'gtdownload standard output:\n' + stdout
            print 'gtdownload standard error:\n'  + stderr

        if process.returncode:
            print stderr
            raise Exception("Failed to download BAM for UUID %s." % (self.uuid))

def parse_options():
    parser = OptionParser()
    parser.add_option('-s', '--ssl-torrent', dest='ssl_torrent',
        help='UUID of SSL-protected torrent', metavar='UUID')
    parser.add_option('-n', '--nossl-torrent', dest='nossl_torrent',
        help='UUID of non-SSL-protected torrent', metavar='UUID')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
        help='print output from gtdownload')

    return parser.parse_args()


if __name__ == '__main__':

    (options, args) = parse_options()

    try:
        call(['gtdownload'], stdout=PIPE, stderr=PIPE)
    except OSError:
        print 'Cannot find gtdownload in search path'
        exit(1)

    print 'Welcome to gtperftest.'

    ssl_uuid = options.ssl_torrent
    if not ssl_uuid: ssl_uuid = DEFAULT_SSL_UUID
    nossl_uuid = options.nossl_torrent
    if not nossl_uuid: nossl_uuid = DEFAULT_NOSSL_UUID

    print 'Downloading analysis object with SSL'
    GTDownload(ssl_uuid).run(1)

    print 'Downloading analysis object without SSL'
    GTDownload(nossl_uuid).run(2)

    print 'Downloading analysis object with SSL in zero-storage mode'
    GTDownload(ssl_uuid).run(3, arguments='--zero-storage')

    print 'Downloading analysis object without SSL in zero-storage mode'
    GTDownload(nossl_uuid).run(4, arguments='--zero-storage')

    print 'gtperftest completed successfully.'

